import cron from "node-cron";
import Ticket from "../models/Ticket.js";
import TicketStock from "../models/TicketStock.js";
import { appendLog } from "../routes/adminRoutes.js";

// L·∫•y th·ªùi gian h·∫øt h·∫°n t·ª´ ENV, m·∫∑c ƒë·ªãnh 15 ph√∫t
const EXPIRE_MINUTES = parseInt(process.env.PENDING_TICKET_EXPIRE_MINUTES || "1", 10) * 60 * 1000;

console.log(`‚è≥ Pending tickets will auto-delete after ${EXPIRE_MINUTES / 60000} minutes`);

cron.schedule("* * * * *", async () => {
  try {
    console.log("‚è≥ Running pending ticket cleanup job...");

    const now = Date.now();

    // T√¨m c√°c v√© pending qu√° h·∫°n
    const expiredTickets = await Ticket.find({
      status: "pending",
      createdAt: { $lte: new Date(now - EXPIRE_MINUTES) }
    });

    if (!expiredTickets.length) {
      console.log("‚úÖ No expired tickets found.");
      return;
    }

    console.log(`‚è≥ Found ${expiredTickets.length} expired tickets, deleting...`);

    for (const ticket of expiredTickets) {
      // ‚úÖ Ho√†n l·∫°i stock
      const stock = await TicketStock.findOne({ ticketType: ticket.ticketType });
      if (stock) {
        stock.remaining += ticket.quantity;
        await stock.save();
      }

      // ‚úÖ Ghi log tr∆∞·ªõc khi xo√°
      appendLog(`üóë Auto-deleted expired ticket`, ticket.buyerEmail, "System");
    }

    // ‚úÖ Xo√° t·∫•t c·∫£ v√© pending ƒë√£ h·∫øt h·∫°n
    const idsToDelete = expiredTickets.map(t => t._id);
    await Ticket.deleteMany({ _id: { $in: idsToDelete } });

    console.log(`‚úÖ Deleted ${expiredTickets.length} expired tickets`);
  } catch (err) {
    console.error("‚ùå Cron job error:", err);
  }
});
