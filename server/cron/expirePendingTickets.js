import cron from "node-cron";
import { prisma } from "../utils/prismaClient.js";
import { appendLog } from "../routes/adminRoutes.js";

// L·∫•y th·ªùi gian h·∫øt h·∫°n t·ª´ ENV, m·∫∑c ƒë·ªãnh 15 ph√∫t
const EXPIRE_MINUTES = parseInt(process.env.PENDING_TICKET_EXPIRE_MINUTES || "1", 10) * 60 * 1000;

console.log(`‚è≥ Pending tickets will auto-delete after ${EXPIRE_MINUTES / 60000} minutes`);

cron.schedule("* * * * *", async () => {
  try {
    console.log("‚è≥ Running pending ticket cleanup job...");

    const now = new Date();
    const expiredBefore = new Date(now.getTime() - EXPIRE_MINUTES);

    // ‚úÖ T√¨m c√°c v√© pending qu√° h·∫°n
    const expiredTickets = await prisma.ticket.findMany({
      where: {
        status: "pending",
        createdAt: { lt: expiredBefore }
      }
    });

    if (!expiredTickets.length) {
      console.log("‚úÖ No expired tickets found.");
      return;
    }

    console.log(`‚è≥ Found ${expiredTickets.length} expired tickets, deleting...`);

    // ‚úÖ L·∫∑p qua t·ª´ng ticket ƒë·ªÉ ho√†n l·∫°i stock
    for (const ticket of expiredTickets) {
      const stock = await prisma.ticketStock.findUnique({
        where: { ticketType: ticket.ticketType }
      });

      if (stock) {
        // ‚úÖ TƒÉng l·∫°i remaining
        await prisma.ticketStock.update({
          where: { ticketType: ticket.ticketType },
          data: {
            remaining: stock.remaining + ticket.quantity
          }
        });
      }

      // ‚úÖ Ghi log tr∆∞·ªõc khi xo√°
      appendLog(`üóë Auto-deleted expired ticket`, ticket.buyerEmail, "System");
    }

    // ‚úÖ X√≥a t·∫•t c·∫£ v√© pending ƒë√£ h·∫øt h·∫°n
    const idsToDelete = expiredTickets.map((t) => t.id);
    await prisma.ticket.deleteMany({
      where: { id: { in: idsToDelete } }
    });

    console.log(`‚úÖ Deleted ${expiredTickets.length} expired tickets`);
  } catch (err) {
    console.error("‚ùå Cron job error:", err);
  }
});
